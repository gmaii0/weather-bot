import httpx
from aiogram.types import CallbackQuery
from aiogram import Router, Bot, F
import datetime
from core.keyboards.inline import inline_regions_list_keyboard
from core.settings import settings
import pytz

bot = Bot(token=settings.bots.bot_token, parse_mode='HTML')
weather_router = Router()


def get_current_date():
    now = datetime.datetime.now()
    formatted_date = now.strftime("%Y-%m-%d %H:%M")
    return formatted_date


def get_wind_direction(degrees):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º —Å–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö."""

    directions = [
        "–° (–°–µ–≤–µ—Ä)", "–°–°–í", "–°–í", "–í–°–í",
        "–í (–í–æ—Å—Ç–æ–∫)", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í",
        "–Æ (–Æ–≥)", "–Æ–ó", "–ó–Æ–ó", "–ó (–ó–∞–ø–∞–¥)",
        "–ó–°–ó", "–°–ó", "–°–°–ó", "–° (–°–µ–≤–µ—Ä)"
    ]
    index = int((degrees + 11.25) / 22.5)
    return directions[index % 16]


code_to_smile = {
    "Clear": "–Ø—Å–Ω–æ \U00002600",
    "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
    "Rain": "–î–æ–∂–¥—å \U00002614",
    "Drizzle": "–î–æ–∂–¥—å \u00002614",
    "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
    "Snow": "–°–Ω–µ–≥ \u0001F328",
    "Mist": "–¢—É–º–∞–Ω \U0001F32B"}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
def convert_timestamp_to_time(timestamp, timezone_offset):
    timezone = pytz.timezone("Asia/Tashkent")  # –£–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    dt = datetime.datetime.fromtimestamp(timestamp, tz=timezone)
    return dt.strftime("%H:%M")


async def get_weather(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    city = callback_query.data
    api_url = f"{settings.api_url.weather_url}{city}&appid={settings.api_url.openweather_api_token}&units=metric"
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(api_url)
            if response.status_code == 200:
                data = response.json()
                return data
            else:
                await callback_query.message.answer(f"{response.status_code}")
    except Exception as e:
        await  callback_query.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@weather_router.callback_query(F.data.in_(
    [
        'andijan', 'bukhara', 'jizzakh', 'qarshi',
        'navoi', 'namangan', 'samarkand', 'termez',
        'gulistan', 'tashkent', 'ferghana', 'urgench', 'nukus'
    ]))
async def process_weather(callback_query: CallbackQuery):
    weather_data = await get_weather(callback_query)
    current_date = get_current_date()
    if weather_data:
        city_name = weather_data["name"]
        weather_description = weather_data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "nomalum"
        temperature = weather_data["main"]["temp"]
        feels_like = weather_data["main"]["feels_like"]
        humidity = weather_data["main"]["humidity"]
        wind_speed = weather_data["wind"]["speed"]
        wind_direction = get_wind_direction(weather_data["wind"]["deg"])  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
        pressure = weather_data["main"]["pressure"]
        visibility = weather_data["visibility"]
        clouds_percentage = weather_data["clouds"]["all"]
        sunrise_timestamp = weather_data["sys"]["sunrise"]
        sunset_timestamp = weather_data["sys"]["sunset"]
        await callback_query.message.edit_text(
            f"**üåÜ –ü–æ–≥–æ–¥–∞ –≤ {city_name}:**\n"
            f"**{current_date}:**\n"
            f"* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.1f}¬∞C {wd}\n"
            f"*(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C)\n"
            f"* –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"* –í–µ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å, {wind_direction}\n"
            f"* –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
            f"* –í–∏–¥–∏–º–æ—Å—Ç—å: {visibility} –º\n"
            f"**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**\n"
            f"* –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds_percentage}%\n"
            f"* –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {convert_timestamp_to_time(sunrise_timestamp, 18000)}\n"
            f"* –ó–∞—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {convert_timestamp_to_time(sunset_timestamp, 18000)}\n"
            ,
            reply_markup=inline_regions_list_keyboard
        )
    else:
        pass
